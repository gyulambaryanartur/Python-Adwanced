1). Which of the following keywords mark the beginning of the class definition?
A)
B)
*C)
D)
E)
2). Which of the following is required to create a new instance of the class?
*A)
B)
C)
D)
E)
3). Is the following code correct?
------------------------------
class A:
    def __init__(self, b):
        self.b = b

    def display(self):
        print(self.b)

obj = A('Hello')
del obj
*A)
B)
4). What gets printed?
------------------
class Test:
    def __init__(self):
        self.variable = 'Old'
        self.change(self.variable)

    def change(self, var):
        var = 'New'

obj = Test()
print(obj.variable)
A)
B)
*C)
D)
E)
5). What gets printed?
------------------
class Fruits:
    def __init__(self, price):
        self.price = price


obj = Fruits(50)
obj.quantity = 10
obj.bags = 2

print(obj.quantity + len(obj.__dict__))
A)
B)
C)
*D)
E)
6). What is getattr() used for?
*A)
B)
C)
D)
7). Which of the following expressions calls parent class's constructor?
A)
B)
C)
*D)
E)
8). Which statement below is used to inherit class B from class A?
A)
*B)
C)
D)
E)
9). What gets printed?
------------------
class Shape:
    def __init__(self):
        self.color = 'black'


class Square(Shape):
    def __init__(self):
        self.edges = 4
        super().__init__()

        
sq = Square()
print(sq.color)
*A)
B)
C)
D)
10). What gets printed?
------------------
class Test:
    pass


t = Test()
print(isinstance(t, object))
*A)
B)
C)
11). What gets printed?
------------------
class Shape:
    pass


class Square(Shape):
    def __init__(self):
        super().__init__()


sq = Square()
print(isinstance(sq, Shape))
*A)
B)
C)
12). Does Python support multiple inheritance?
*A)
B)
13). What gets printed?
------------------
class Black:
    def get_color(self):
        return 'black'


class White:
    def get_color(self):
        return 'white'


class ColorMix(White, Black):
    pass


mix = ColorMix()
print(mix.get_color())
A)
*B)
C)
D)
14). What gets printed?
------------------
class Test:
    @classmethod
    def info(cls):
        print(cls)


t = Test()
t.info()
A)
B)
*C)
D)
E)
15). What gets printed?
------------------
class Test:
    @staticmethod
    def info(cls):
        print(cls)


t = Test()
t.info()
A)
*B)
C)
D)
E)
16). Which of this methods is not a magic method for class?
A)
B)
*C)
D)
E)
17). Which of the following functions overloads standard arithmetic operations?
A)
B)
C)
*D)
E)
18). What gets printed?
------------------
class Person:

    __slots__ = 'id'

    def __init__(self, id):
        self.id = id


obama = Person(100)
obama.age = 49
print(obama.age + obama.id)
A)
B)
C)
*D)
E)
19). What gets printed?
------------------
class Test:
    def __init__(self):
        self.__info = None

    @property
    def info(self):
        pass

    @info.setter
    def info(self, msg: str):
        self.__info = msg

    @info.getter
    def info(self):
        return f'[INFO] {self.__info}'


t = Test()
t.info = 'something'
print(t.info)
A)
B)
*C)
D)
E)
20). What gets printed?
------------------
import abc


class Weapon(abc.ABC):
    def __init__(self):
        super().__init__()

    def fire(self):
        print('pew-pew')


obj = Weapon()
obj.fire()
A)
*B)
C)
D)
21). What gets printed?
------------------
class A:

    class B:
        def about(self):
            print('I am B')

    def __init__(self):
        self.b = A.B()

    def __repr__(self):
        return 'I am A'


obj = A()
obj.b.about()
print(obj)
A)
B)
*C)
D)
22). def ensure_even(func):
    def wrapped(*args, **kwargs):
             value = func(*args, **kwargs)
             return value if value % 2 == 0 else value - 1
    return wrapped


@ensure_even
def add(a: int, b: int) -> int:
    return a + b


print(add(4, 7))
A)
*B)
C)
D)
E)
23). What is the output of the following program?
--------------------------------------------
def foo(x):
    if x ==1:
        return 1
    else:
        return x + foo(x - 1)


print(foo(4))
*A)
B)
C)
D)
24). What is the output of the program below?
----------------------------------------
def mk(x):
    def mk1():
        print('Decorated')
        x()
    return mk1


def mk2():
    print('Ordinary')


p = mk(mk2)
p()
A)
B)
C)
*D)
25). The code shown above can work with ____ parameters.
---------------------------------------------------
def f(x):
    def f1(*args, **kwargs):
        print('Sanfoundry')
        return x(*args, **kwargs)
    return f1
A)
B)
*C)
D)
26). What is the output?
-------------------
def f(x):
    def f1(*args, **kwargs):
        print('*' * 5)
        x(*args, **kwargs)
        print('*' * 5)
    return f1


def a(x):
    def f1(*args, **kwargs):
        print('%'* 5)
        x(*args, **kwargs)
        print('%'* 5)
    return f1


@f
@a
def p(m):
    print(m)


p('hello')
*A)
B)
C)
D)
27). What gets printed?
------------------
def feeder():
    names = ('Joe', 'James', 'Piter', 'Sauron', 'Arthas')
    for name in names:
        yield name


print(type(feeder()))
A)
*B)
C)
D)
28). What gets printed?
------------------
def feeder():
    names = ('Joe', 'James', 'Piter', 'Sauron', 'Arthas')
    for name in names:
        yield name


names = feeder()
for idx in range(10):
    print(next(names), end=', ')
A)
B)
C)
*D)
29). Which of the listed below is not an OOP principle?
A)
*B)
C)
D)
30). range function returns ____ .
A)
*B)
C)
D)
